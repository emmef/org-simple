#!/usr/bin/env bash

manifest_filename="install_manifest.txt"
manifest_path="$(pwd)/${manifest_filename}"

printed_synopsis=

print_synopsis() {
  if [ -n "${printed_synopsis}" ] ; then
    return 0
  fi
  echo "SYNOPSIS"
  echo "  The \"build\" script helps you to build the CMake-generated make"
  echo "  project in the current directory. It can also install the project"
  echo "  using 'sudo make install', optionally by first removing all files"
  echo "  in the install manifest file (if any)."
  echo -e "\nUSAGE"
  echo "  $0"
  echo -e "\nOPTIONS"
  echo "    --help          Print this synopsis."
  echo "    --clean|-C      Clean project before make. Default=false"
  echo "    --concurrency   Use parallel processes to build. Default=false"
  echo "    --display|-D    Display install manifest. Default=false"
  echo "    --install|-I    Install built version. Default=false"
  echo "    --silent|-S     Suppress progress information"
  echo "    --replace|-R    Combines --uninstall and then --install."
  echo "                    followed by \"error\" also suppressed error messages."
  echo "    --uninstall|-U  Uninstall previous version. Default=false"
  echo ""
  echo "  The --display and --uninstall options require the presence of a"
  echo "  manifest file \"./install_manifest.txt\" that was generated by a "
  echo "  previous build."
  printed_synopsis="yes"
}

exit_message_synopsis() {
  echo "ERROR: $*" >&2
  print_synopsis
  exit 1
}

do_uninstall=
do_install=
do_clean=
do_display=
do_concurrency=
do_silent=

display_progress() {
  if [ -z "${do_silent}" ] ;
  then
    echo "$*"
  fi
}

display_error() {
  if [ "${do_silent}" == "error" ] ; then
    return 0
  fi
  echo "$*" >&2
}

while [ -n "$1" ] ; do
  arg="$1"
  shift
  case "${arg}" in
  --clean|-C)
    do_clean="true"
    ;;
  --display|-D)
    do_display="true"
    ;;
  --help)
    print_synopsis
    ;;
  --install|-I)
    do_install="true"
    ;;
  --replace|-R)
    do_install="true"
    do_uninstall="true"
    ;;
  --silent|-S)
    if [ "$1" == "error" ] ;
    then
      do_silent="error"
      shift
    else
      do_silent="progress"
    fi
    ;;
  --uninstall|-U)
    do_uninstall="true"
    ;;
  --concurrency)
    do_concurrency="-j"
    ;;
  *)
    exit_message_synopsis "Unknown or unexpected argument: '${arg}'" >&2
  esac
done



displayed_missing_manifest=

display_files_in_manifest() {
  if [ -z "${do_display}" ] ; then
    return 0
  fi
  if [ -f "${manifest_path}" ] ; then
    display_progress "Displaying files in manifest file \"${manifest_path}\":"
    cat "${manifest_path}"
  else
    if [ -z "${displayed_missing_manifest}" ] ; then
      display_error "Missing manifest file:\"${manifest_path}\"" >&2
    fi
    displayed_missing_manifest="true"
    return 1
  fi
}

remove_files_in_manifest() {
  if [ -z "${do_uninstall}" ] ; then
    return 0
  fi
  if [ -f "${manifest_path}" ] ; then
    display_progress "Removing files in manifest file \"${manifest_path}\""
    if ! sudo xargs rm < "${manifest_path}" ; then
      display_error "Error when removing files in install manifest \"${manifest_path}\"" >&2
      display_error "Will attempt install if requested" >&2
      return 1
    fi
  else
    if [ -z "${displayed_missing_manifest}" ] ; then
      display_error "Missing manifest file:\"${manifest_path}\"" >&2
    fi
    displayed_missing_manifest="true"
    exit 1
  fi
}

if [ -n "${do_clean}" ] ; then
  display_progress "Make clean..."
  make clean
fi

display_progress "Building project..."
if ! make $do_concurrency ; then
  display_error "Build failed!" >&2
  exit 1
fi

display_files_in_manifest

remove_files_in_manifest

if [ -n "${do_install}" ] ; then
  display_progress "Make install..."
  if ! sudo make install ; then
    display_error "Install failed"
  fi
fi
